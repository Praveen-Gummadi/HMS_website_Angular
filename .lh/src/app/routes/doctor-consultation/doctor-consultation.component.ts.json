{
    "sourceFile": "src/app/routes/doctor-consultation/doctor-consultation.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1738235139380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1738235139380,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\n\r\ninterface Doctor {\r\n  name: string;\r\n  experience: number;\r\n  specialization: string;\r\n  hospital: string;\r\n  fee: number;\r\n  image: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-doctor-consultation',\r\n  standalone: true,\r\n  imports: [SharedModule, MatDialogModule],\r\n  templateUrl: './doctor-consultation.component.html',\r\n  styleUrl: './doctor-consultation.component.scss'\r\n})\r\nexport class DoctorConsultationComponent {\r\n\r\n  locationDetails = localStorage.getItem('userAddress');\r\n\r\n  showPopup = false;\r\n  searchQuery: string = '';\r\n\r\n  doctors: Doctor[] = [\r\n    {\r\n      name: 'Dr. Dheeraj Kumar Anupa',\r\n      experience: 11,\r\n      specialization: 'MBBS, MD - General Medicine, DNB - Gastroenterology',\r\n      hospital: 'Empower Hospitals, Hyderabad',\r\n      fee: 399,\r\n      image: 'doctor-3d.png'\r\n    },\r\n    {\r\n      name: 'Dr. Naveen Nadipelli',\r\n      experience: 18,\r\n      specialization: 'MBBS, DPM - Psychiatry',\r\n      hospital: 'Empower Hospitals, Hyderabad',\r\n      fee: 699,\r\n      image: 'doctor-3d.png'\r\n    },\r\n    {\r\n      name: 'Dr. Uday Nallamala',\r\n      experience: 15,\r\n      specialization: 'MBBS, DPM - Dentist',\r\n      hospital: 'Empower Hospitals, Hyderabad',\r\n      fee: 299,\r\n      image: 'doctor-3d.png'\r\n    },\r\n  ];\r\n\r\n  filteredDoctors: Doctor[] = [...this.doctors];\r\n\r\n  onSearchKeyup(event: KeyboardEvent) {\r\n    if (event.key === 'Enter') {\r\n      this.searchDoctors();\r\n    } else {\r\n      this.searchDoctors();\r\n    }\r\n  }\r\n\r\n  searchDoctors() {\r\n    if (this.searchQuery.trim() === '') {\r\n      this.filteredDoctors = [...this.doctors];\r\n    } else {\r\n      this.filteredDoctors = this.doctors.filter(doctor =>\r\n        doctor.name.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n        doctor.specialization.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    }\r\n  }\r\n\r\n  selectedDoctor: Doctor | null = null;\r\n  isDoctorSelected: boolean = false;\r\n\r\n  selectDoctor(doctor: Doctor) {\r\n    this.selectedDoctor = doctor;\r\n    this.isDoctorSelected = true;\r\n  }\r\n\r\n  goBackToDoctorList() {\r\n    this.selectedDoctor = null;\r\n    this.isDoctorSelected = false;\r\n  }\r\n\r\n  daysSlots: { [date: string]: string[] } = {};\r\n  selectedDate: string = '';\r\n  selectedSlot: string | null = null;\r\n  displayedDates: string[] = [];\r\n  startDate: Date = new Date();\r\n\r\n  constructor() {\r\n    this.generateTimeSlots();\r\n  }\r\n\r\n  generateTimeSlots() {\r\n    this.daysSlots = {};\r\n    this.displayedDates = [];\r\n\r\n    const startHour = 9; // 9 AM\r\n    const endHour = 17; // 5 PM\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(this.startDate);\r\n      date.setDate(this.startDate.getDate() + i);\r\n\r\n      const dateString = date.toISOString().split('T')[0];\r\n      this.displayedDates.push(dateString);\r\n      const slotsForDay = [];\r\n\r\n      for (let hour = startHour; hour < endHour; hour++) {\r\n        for (let minute = 0; minute < 60; minute += 15) {\r\n          const slotTime = new Date(date);\r\n          slotTime.setHours(hour, minute, 0);\r\n          slotsForDay.push(\r\n            slotTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })\r\n          );\r\n        }\r\n      }\r\n\r\n      this.daysSlots[dateString] = slotsForDay;\r\n    }\r\n\r\n    // Default selection: Select the first available date\r\n    this.selectedDate = this.displayedDates[0];\r\n  }\r\n\r\n  selectDate(date: string) {\r\n    this.selectedDate = date; // Update selected date\r\n    this.selectedSlot = null; // Reset selected slot\r\n  }\r\n\r\n  selectSlot(slot: string) {\r\n    this.selectedSlot = slot;\r\n  }\r\n\r\n  previousWeek() {\r\n    this.startDate.setDate(this.startDate.getDate() - 1);\r\n    this.generateTimeSlots();\r\n  }\r\n\r\n  nextWeek() {\r\n    this.startDate.setDate(this.startDate.getDate() + 1);\r\n    this.generateTimeSlots();\r\n  }\r\n\r\n  showPreview: boolean = false;\r\n\r\n  goToAppointmentPreview() {\r\n    if (this.selectedDoctor && this.selectedSlot) {\r\n      this.showPreview = true;\r\n    } else {\r\n      alert('Please select a doctor and time slot.');\r\n    }\r\n  }\r\n\r\n  goBack() {\r\n    this.showPreview = false;\r\n  }\r\n\r\n  goNext() {\r\n    this.showPopup = true;\r\n  }\r\n\r\n  confirmAppointment(payment: boolean) {\r\n    if (payment) {\r\n      alert('Redirecting to payment gateway...');\r\n    } else {\r\n      alert('Appointment confirmed without payment!');\r\n    }\r\n    this.showPreview = false;\r\n  }\r\n\r\n  dialogsubmit() {\r\n    this.showPopup = false;\r\n  }\r\n}\r\n\r\n"
        }
    ]
}