{
    "sourceFile": "src/app/routes/cart/cart.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1739967608493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740132190790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,8 +197,9 @@\n   // Method to handle the \"Next\" button click\r\n   saveandnext(stepper: MatStepper) {\r\n     // Add any save logic here if needed\r\n     console.log('Navigating to the next step...');\r\n+    console.log(stepper);\r\n     stepper.next();\r\n   }\r\n \r\n    // Available dates for selection\r\n"
                },
                {
                    "date": 1740132540327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,11 @@\n \r\n   // Method to handle the \"Next\" button click\r\n   saveandnext(stepper: MatStepper) {\r\n     // Add any save logic here if needed\r\n+    const currentIndex = stepper.selectedIndex;\r\n     console.log('Navigating to the next step...');\r\n+    console.log(currentIndex);\r\n     console.log(stepper);\r\n     stepper.next();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1740397690992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,18 +88,15 @@\n \r\n   formatCartData(data: any[]): any[] {\r\n     const patients: any[] = [];\r\n \r\n-    // Group tests under patients dynamically\r\n     data.forEach(test => {\r\n-      // Find if patient already exists\r\n       let patient = patients.find(p => p.id === test.patientID);\r\n \r\n       if (!patient) {\r\n-        // If patient doesn't exist, create a new one\r\n         patient = {\r\n-          id: test.patientID,  // Assuming `patientID` exists in API data\r\n-          patientName: test.patientName, // Assuming `patientName` exists\r\n+          id: test.patientID,\r\n+          patientName: test.patientName,\r\n           tests: []\r\n         };\r\n         patients.push(patient);\r\n       }\r\n"
                },
                {
                    "date": 1740680220276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,364 @@\n+import { Component, NgModule, ViewChild, AfterViewInit, ChangeDetectorRef, OnInit } from '@angular/core';\r\n+import { SharedModule } from '../../shared/shared.module';\r\n+import { MatStepper } from '@angular/material/stepper';\r\n+import { StepperSelectionEvent } from '@angular/cdk/stepper';\r\n+import { MyheaderComponent } from '../profile/myheader/myheader.component';\r\n+import { ActivatedRoute } from '@angular/router';\r\n+import { AuthService } from '../../authentication/auth.service';\r\n+import { MatDialog } from '@angular/material/dialog';\r\n+import { AddpatientDialogComponent } from '../lab-dashboard/addpatient-dialog/addpatient-dialog.component';\r\n+import { LabService } from '../lab-dashboard/lab.service';\r\n+import { MatButtonToggle } from '@angular/material/button-toggle';\r\n+\r\n+type AvailableDate = {\r\n+  day: string;\r\n+  weekday: string;\r\n+  isAvailable: boolean;\r\n+};\r\n+\r\n+declare var Razorpay: any;\r\n+\r\n+@Component({\r\n+  selector: 'app-cart',\r\n+  standalone: true,\r\n+  imports: [SharedModule, MyheaderComponent, MatButtonToggle],\r\n+  templateUrl: './cart.component.html',\r\n+  styleUrl: './cart.component.scss'\r\n+})\r\n+\r\n+export class CartComponent implements OnInit {\r\n+\r\n+  @ViewChild(MatStepper) stepper: MatStepper | undefined;\r\n+\r\n+  locationDetails = localStorage.getItem('userAddress');\r\n+\r\n+  addressLine1: string = '';\r\n+  addressLine2: string = '';\r\n+  username: string = '';\r\n+  phone: string = '';\r\n+  email: string = '';\r\n+\r\n+  cartItems: any[] = [];\r\n+  tests: any[] = [];\r\n+  selectedSlottype : string = '';\r\n+\r\n+\r\n+  // Flag to toggle form visibility\r\n+  showForm: boolean = false;\r\n+  isSignedIn: boolean = false;\r\n+\r\n+  constructor(private route: ActivatedRoute, private authService: AuthService, private dialog: MatDialog,\r\n+    private labservice: LabService,\r\n+\r\n+  ) {\r\n+    this.updateVisibleDates();\r\n+  }\r\n+\r\n+  ngOnInit(): void {\r\n+\r\n+    // this.cartItems = this.labservice.getCartItems();\r\n+\r\n+    this.cartItems = this.formatCartData(this.labservice.getCartItems());\r\n+    console.log(this.cartItems);\r\n+    this.route.queryParams.subscribe(params => {\r\n+      const step = params['step']; // e.g., step=2\r\n+      if (step && this.stepper) {\r\n+        this.stepper.selectedIndex = +step - 1; // Set the step index (0-based index)\r\n+      }\r\n+    });\r\n+\r\n+    this.isSignedIn = this.authService.isSignedIn();\r\n+\r\n+    if (this.isSignedIn) {\r\n+      this.username = String(localStorage.getItem('username'));\r\n+      this.phone = String(localStorage.getItem('usermobile'));\r\n+      this.email = String(localStorage.getItem('useremail'));\r\n+    }\r\n+\r\n+    if (this.locationDetails) {\r\n+      const addressParts = this.locationDetails.split(', ');\r\n+\r\n+      this.addressLine1 = addressParts[0] || '';\r\n+\r\n+      this.addressLine2 = addressParts.slice(1).join(', ') || '';\r\n+    }\r\n+\r\n+    this.totalAmount;\r\n+  }\r\n+\r\n+  formatCartData(data: any[]): any[] {\r\n+    const patients: any[] = [];\r\n+\r\n+    data.forEach(test => {\r\n+      let patient = patients.find(p => p.id === test.patientID);\r\n+\r\n+      if (!patient) {\r\n+        patient = {\r\n+          id: test.patientID,\r\n+          patientName: test.patientName,\r\n+          tests: []\r\n+        };\r\n+        patients.push(patient);\r\n+      }\r\n+\r\n+      // Add test details under the respective patient\r\n+      patient.tests.push({\r\n+        serviceItemID: test.serviceItemID,\r\n+        serviceItemName: test.serviceItemName,\r\n+        actualprice: test.price - (test.price * test.discount / 100) // Apply discount\r\n+      });\r\n+    });\r\n+\r\n+    return patients;\r\n+  }\r\n+\r\n+  // Toggle the form visibility\r\n+  toggleForm() {\r\n+    this.showForm = !this.showForm;\r\n+  }\r\n+\r\n+  // Dynamic cart data\r\n+  // cartItems = [\r\n+  //   {\r\n+  //     id: 1,\r\n+  //     patientName: 'John Doe',\r\n+  //     tests: [\r\n+  //       { id: 1, testName: 'Glucose Random (RBS) - Sodium Flouride', price: 249 },\r\n+  //     ],\r\n+  //   },\r\n+  // ];\r\n+\r\n+\r\n+\r\n+  // Add a new patient\r\n+  addAnotherPatient() {\r\n+    const newPatientId = this.cartItems.length + 1;\r\n+    this.cartItems.push({\r\n+      id: newPatientId,\r\n+      patientName: `Patient ${newPatientId}`,\r\n+     tests: [], // Empty test list initially\r\n+      // tests: this.cartItems\r\n+    });\r\n+  }\r\n+\r\n+  // Add a new test for a specific patient\r\n+  addTest(patientId: number) {\r\n+    const patient = this.cartItems.find((p) => p.id === patientId);\r\n+    if (patient) {\r\n+      const newTestId = patient.tests.length + 1;\r\n+      patient.tests.push({\r\n+        id: newTestId,\r\n+        testName: `New Test ${newTestId}`,\r\n+        price: 199, // Example price\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  // Remove a specific test from a specific patient\r\n+  removeTest(patientId: number, testId: number) {\r\n+    const patientIndex = this.cartItems.findIndex(p => p.id === patientId);\r\n+\r\n+    if (patientIndex !== -1) {\r\n+      // Filter out the test to remove\r\n+      this.cartItems[patientIndex].tests = this.cartItems[patientIndex].tests.filter((test: { serviceItemID: number; }) => test.serviceItemID !== testId);\r\n+\r\n+      // If the patient has no more tests, remove them from the cart\r\n+      if (this.cartItems[patientIndex].tests.length === 0) {\r\n+        this.cartItems.splice(patientIndex, 1);\r\n+      }\r\n+\r\n+      // Force Angular to detect changes\r\n+      this.cartItems = [...this.cartItems];\r\n+      this.labservice.removeItem(testId);\r\n+      this.labservice.getCartItems();\r\n+    }\r\n+  }\r\n+\r\n+\r\n+  // Summary amount (calculated dynamically)\r\n+  get totalAmount(): number {\r\n+    if (!this.cartItems || this.cartItems.length === 0) return 0;\r\n+\r\n+    return this.cartItems.reduce((total, patient) => {\r\n+      if (!patient.tests || patient.tests.length === 0) return total;\r\n+\r\n+      const patientTotal = patient.tests.reduce((testTotal: number, test: { actualprice: number; }) => {\r\n+        console.log(`Adding Test: Price: ${test.actualprice}`);\r\n+        return testTotal + (test.actualprice || 0);\r\n+      }, 0);\r\n+      return total + patientTotal;\r\n+    }, 0);\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+  // Method to handle the \"Next\" button click\r\n+  saveandnext(stepper: MatStepper) {\r\n+    // Add any save logic here if needed\r\n+    const currentIndex = stepper.selectedIndex;\r\n+    console.log('Navigating to the next step...');\r\n+    console.log(currentIndex);\r\n+    console.log(stepper);\r\n+    stepper.next();\r\n+  }\r\n+\r\n+   // Available dates for selection\r\n+   availableDates: AvailableDate[] = [\r\n+    { day: '31 Dec', weekday: 'Tuesday', isAvailable: true },\r\n+    { day: '01 Jan', weekday: 'Wednesday', isAvailable: true },\r\n+    { day: '02 Jan', weekday: 'Thursday', isAvailable: true },\r\n+    { day: '03 Jan', weekday: 'Friday', isAvailable: true },\r\n+    { day: '04 Jan', weekday: 'Saturday', isAvailable: true },\r\n+    { day: '05 Jan', weekday: 'Sunday', isAvailable: true },\r\n+  ];\r\n+\r\n+  // Visible dates should have the same type as availableDates\r\n+  visibleDates: AvailableDate[] = [];\r\n+  visibleCount = 5; // Number of dates visible at a time\r\n+  currentIndex = 0;\r\n+  selectedDateIndex: number | null = null;\r\n+\r\n+  // Update the visible dates\r\n+  updateVisibleDates() {\r\n+    this.visibleDates = this.availableDates.slice(\r\n+      this.currentIndex,\r\n+      this.currentIndex + this.visibleCount\r\n+    );\r\n+  }\r\n+\r\n+  // Navigate to the previous set of dates\r\n+  prevDate() {\r\n+    if (this.currentIndex > 0) {\r\n+      this.currentIndex--;\r\n+      this.updateVisibleDates();\r\n+    }\r\n+  }\r\n+\r\n+  // Navigate to the next set of dates\r\n+  nextDate() {\r\n+    if (this.currentIndex + this.visibleCount < this.availableDates.length) {\r\n+      this.currentIndex++;\r\n+      this.updateVisibleDates();\r\n+    }\r\n+  }\r\n+\r\n+  // Select a date\r\n+  selectDate(index: number) {\r\n+    this.selectedDateIndex = index;\r\n+    console.log('Selected Date:', this.visibleDates[index]);\r\n+  }\r\n+\r\n+\r\n+  // Morning and Afternoon slots data\r\n+  morningSlots = [\r\n+    { start: '06:00 AM', end: '07:00 AM' },\r\n+    { start: '07:00 AM', end: '08:00 AM' },\r\n+    { start: '08:00 AM', end: '09:00 AM' },\r\n+    { start: '09:00 AM', end: '10:00 AM' },\r\n+    { start: '10:00 AM', end: '11:00 AM' },\r\n+    { start: '11:00 AM', end: '12:00 PM' },\r\n+  ];\r\n+\r\n+  afternoonSlots = [\r\n+    { start: '12:00 PM', end: '01:00 PM' },\r\n+    { start: '01:00 PM', end: '02:00 PM' },\r\n+  ];\r\n+\r\n+  // Variable to store the selected time slot\r\n+  selectedSlot: { start: string; end: string } | null = null;\r\n+\r\n+  // Select a time slot\r\n+  selectSlot(slot: { start: string; end: string }) {\r\n+    this.selectedSlot = slot;\r\n+    console.log('Selected Time Slot:', slot);\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+   // Selected date and time slot\r\n+   selectedDate: { day: string; weekday: string } = { day: '16 Jan', weekday: 'Tuesday' };\r\n+   selectedSlot1: { start: string; end: string } = { start: '11:00 AM', end: '12:00 PM' };\r\n+\r\n+\r\n+   // add patient button disable\r\n+\r\n+   isHomeSlotActive: boolean = false;\r\n+   ispaymentSlotActive: boolean = false;\r\n+\r\n+   onStepChange(event: StepperSelectionEvent): void {\r\n+     const activeStepLabel = event.selectedStep.label;\r\n+     this.isHomeSlotActive = activeStepLabel === 'Home Slot';\r\n+     this.ispaymentSlotActive = activeStepLabel === 'Payment';\r\n+   }\r\n+\r\n+\r\n+   // Razorpay integration////////////////////////////////////////////////////////////////////////\r\n+\r\n+   proceedtopay () {\r\n+    const RozarpayOptions = {\r\n+      description: 'Sample Razorpay demo',\r\n+      currency: 'INR',\r\n+      amount: 24900,\r\n+      name: 'Praveen Kumar',\r\n+      key: 'rzp_test_L4KYt4E6LiVOhg',\r\n+      image: 'emptylogo.png',\r\n+      prefill: {\r\n+        name: 'Praveen Kumar',\r\n+        email: 'praveen@gmail.com',\r\n+        phone: '0987654321'\r\n+      },\r\n+      theme: {\r\n+        color: '#e36464'\r\n+      },\r\n+      modal: {\r\n+        ondismiss:  () => {\r\n+          console.log('dismissed')\r\n+        }\r\n+      }\r\n+    }\r\n+\r\n+    const successCallback = (paymentid: any) => {\r\n+      console.log(paymentid);\r\n+    }\r\n+\r\n+    const failureCallback = (e: any) => {\r\n+      console.log(e);\r\n+    }\r\n+\r\n+    Razorpay.open(RozarpayOptions,successCallback, failureCallback)\r\n+   }\r\n+\r\n+   goBack(): void {\r\n+    window.history.back();\r\n+  }\r\n+  openAddPatientDialog(): void {\r\n+    const dialogRef = this.dialog.open(AddpatientDialogComponent, {\r\n+      width: '800px',\r\n+    });\r\n+\r\n+    dialogRef.afterClosed().subscribe(result => {\r\n+      if (result) {\r\n+        console.log('Patient Data:', result);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+  ///////////////////////////////////////////////////////\r\n+  /////////////////////////////\r\n+  ///\r\n+  ///\r\n+  //\r\n+\r\n+\r\n+  totalMRP = 133.0;\r\n+  discount = 53.0;\r\n+  originalHomeCollectionCharges = 150.0;\r\n+  discountedHomeCollectionCharges = 75.0;\r\n+  circleMembership = 199.0;\r\n+  totalToPay = 354.0;\r\n+  circleSavings = 20.0;\r\n+  cartSavings = 33.0;\r\n+}\r\n"
                },
                {
                    "date": 1740680302399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,8 @@\n \r\n       // Force Angular to detect changes\r\n       this.cartItems = [...this.cartItems];\r\n       this.labservice.removeItem(testId);\r\n-      this.labservice.getCartItems();\r\n     }\r\n   }\r\n \r\n \r\n@@ -361,366 +360,4 @@\n   totalToPay = 354.0;\r\n   circleSavings = 20.0;\r\n   cartSavings = 33.0;\r\n }\r\n-import { Component, NgModule, ViewChild, AfterViewInit, ChangeDetectorRef, OnInit } from '@angular/core';\r\n-import { SharedModule } from '../../shared/shared.module';\r\n-import { MatStepper } from '@angular/material/stepper';\r\n-import { StepperSelectionEvent } from '@angular/cdk/stepper';\r\n-import { MyheaderComponent } from '../profile/myheader/myheader.component';\r\n-import { ActivatedRoute } from '@angular/router';\r\n-import { AuthService } from '../../authentication/auth.service';\r\n-import { MatDialog } from '@angular/material/dialog';\r\n-import { AddpatientDialogComponent } from '../lab-dashboard/addpatient-dialog/addpatient-dialog.component';\r\n-import { LabService } from '../lab-dashboard/lab.service';\r\n-import { MatButtonToggle } from '@angular/material/button-toggle';\r\n-\r\n-type AvailableDate = {\r\n-  day: string;\r\n-  weekday: string;\r\n-  isAvailable: boolean;\r\n-};\r\n-\r\n-declare var Razorpay: any;\r\n-\r\n-@Component({\r\n-  selector: 'app-cart',\r\n-  standalone: true,\r\n-  imports: [SharedModule, MyheaderComponent, MatButtonToggle],\r\n-  templateUrl: './cart.component.html',\r\n-  styleUrl: './cart.component.scss'\r\n-})\r\n-\r\n-export class CartComponent implements OnInit {\r\n-\r\n-  @ViewChild(MatStepper) stepper: MatStepper | undefined;\r\n-\r\n-  locationDetails = localStorage.getItem('userAddress');\r\n-\r\n-  addressLine1: string = '';\r\n-  addressLine2: string = '';\r\n-  username: string = '';\r\n-  phone: string = '';\r\n-  email: string = '';\r\n-\r\n-  cartItems: any[] = [];\r\n-  tests: any[] = [];\r\n-  selectedSlottype : string = '';\r\n-\r\n-\r\n-  // Flag to toggle form visibility\r\n-  showForm: boolean = false;\r\n-  isSignedIn: boolean = false;\r\n-\r\n-  constructor(private route: ActivatedRoute, private authService: AuthService, private dialog: MatDialog,\r\n-    private labservice: LabService,\r\n-\r\n-  ) {\r\n-    this.updateVisibleDates();\r\n-  }\r\n-\r\n-  ngOnInit(): void {\r\n-\r\n-    // this.cartItems = this.labservice.getCartItems();\r\n-\r\n-    this.cartItems = this.formatCartData(this.labservice.getCartItems());\r\n-    console.log(this.cartItems);\r\n-    this.route.queryParams.subscribe(params => {\r\n-      const step = params['step']; // e.g., step=2\r\n-      if (step && this.stepper) {\r\n-        this.stepper.selectedIndex = +step - 1; // Set the step index (0-based index)\r\n-      }\r\n-    });\r\n-\r\n-    this.isSignedIn = this.authService.isSignedIn();\r\n-\r\n-    if (this.isSignedIn) {\r\n-      this.username = String(localStorage.getItem('username'));\r\n-      this.phone = String(localStorage.getItem('usermobile'));\r\n-      this.email = String(localStorage.getItem('useremail'));\r\n-    }\r\n-\r\n-    if (this.locationDetails) {\r\n-      const addressParts = this.locationDetails.split(', ');\r\n-\r\n-      this.addressLine1 = addressParts[0] || '';\r\n-\r\n-      this.addressLine2 = addressParts.slice(1).join(', ') || '';\r\n-    }\r\n-\r\n-    this.totalAmount;\r\n-  }\r\n-\r\n-  formatCartData(data: any[]): any[] {\r\n-    const patients: any[] = [];\r\n-\r\n-    data.forEach(test => {\r\n-      let patient = patients.find(p => p.id === test.patientID);\r\n-\r\n-      if (!patient) {\r\n-        patient = {\r\n-          id: test.patientID,\r\n-          patientName: test.patientName,\r\n-          tests: []\r\n-        };\r\n-        patients.push(patient);\r\n-      }\r\n-\r\n-      // Add test details under the respective patient\r\n-      patient.tests.push({\r\n-        serviceItemID: test.serviceItemID,\r\n-        serviceItemName: test.serviceItemName,\r\n-        actualprice: test.price - (test.price * test.discount / 100) // Apply discount\r\n-      });\r\n-    });\r\n-\r\n-    return patients;\r\n-  }\r\n-\r\n-  // Toggle the form visibility\r\n-  toggleForm() {\r\n-    this.showForm = !this.showForm;\r\n-  }\r\n-\r\n-  // Dynamic cart data\r\n-  // cartItems = [\r\n-  //   {\r\n-  //     id: 1,\r\n-  //     patientName: 'John Doe',\r\n-  //     tests: [\r\n-  //       { id: 1, testName: 'Glucose Random (RBS) - Sodium Flouride', price: 249 },\r\n-  //     ],\r\n-  //   },\r\n-  // ];\r\n-\r\n-\r\n-\r\n-  // Add a new patient\r\n-  addAnotherPatient() {\r\n-    const newPatientId = this.cartItems.length + 1;\r\n-    this.cartItems.push({\r\n-      id: newPatientId,\r\n-      patientName: `Patient ${newPatientId}`,\r\n-     tests: [], // Empty test list initially\r\n-      // tests: this.cartItems\r\n-    });\r\n-  }\r\n-\r\n-  // Add a new test for a specific patient\r\n-  addTest(patientId: number) {\r\n-    const patient = this.cartItems.find((p) => p.id === patientId);\r\n-    if (patient) {\r\n-      const newTestId = patient.tests.length + 1;\r\n-      patient.tests.push({\r\n-        id: newTestId,\r\n-        testName: `New Test ${newTestId}`,\r\n-        price: 199, // Example price\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  // Remove a specific test from a specific patient\r\n-  removeTest(patientId: number, testId: number) {\r\n-    const patientIndex = this.cartItems.findIndex(p => p.id === patientId);\r\n-\r\n-    if (patientIndex !== -1) {\r\n-      // Filter out the test to remove\r\n-      this.cartItems[patientIndex].tests = this.cartItems[patientIndex].tests.filter((test: { serviceItemID: number; }) => test.serviceItemID !== testId);\r\n-\r\n-      // If the patient has no more tests, remove them from the cart\r\n-      if (this.cartItems[patientIndex].tests.length === 0) {\r\n-        this.cartItems.splice(patientIndex, 1);\r\n-      }\r\n-\r\n-      // Force Angular to detect changes\r\n-      this.cartItems = [...this.cartItems];\r\n-    }\r\n-  }\r\n-\r\n-\r\n-  // Summary amount (calculated dynamically)\r\n-  get totalAmount(): number {\r\n-    if (!this.cartItems || this.cartItems.length === 0) return 0;\r\n-\r\n-    return this.cartItems.reduce((total, patient) => {\r\n-      if (!patient.tests || patient.tests.length === 0) return total;\r\n-\r\n-      const patientTotal = patient.tests.reduce((testTotal: number, test: { actualprice: number; }) => {\r\n-        console.log(`Adding Test: Price: ${test.actualprice}`);\r\n-        return testTotal + (test.actualprice || 0);\r\n-      }, 0);\r\n-      return total + patientTotal;\r\n-    }, 0);\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-  // Method to handle the \"Next\" button click\r\n-  saveandnext(stepper: MatStepper) {\r\n-    // Add any save logic here if needed\r\n-    const currentIndex = stepper.selectedIndex;\r\n-    console.log('Navigating to the next step...');\r\n-    console.log(currentIndex);\r\n-    console.log(stepper);\r\n-    stepper.next();\r\n-  }\r\n-\r\n-   // Available dates for selection\r\n-   availableDates: AvailableDate[] = [\r\n-    { day: '31 Dec', weekday: 'Tuesday', isAvailable: true },\r\n-    { day: '01 Jan', weekday: 'Wednesday', isAvailable: true },\r\n-    { day: '02 Jan', weekday: 'Thursday', isAvailable: true },\r\n-    { day: '03 Jan', weekday: 'Friday', isAvailable: true },\r\n-    { day: '04 Jan', weekday: 'Saturday', isAvailable: true },\r\n-    { day: '05 Jan', weekday: 'Sunday', isAvailable: true },\r\n-  ];\r\n-\r\n-  // Visible dates should have the same type as availableDates\r\n-  visibleDates: AvailableDate[] = [];\r\n-  visibleCount = 5; // Number of dates visible at a time\r\n-  currentIndex = 0;\r\n-  selectedDateIndex: number | null = null;\r\n-\r\n-  // Update the visible dates\r\n-  updateVisibleDates() {\r\n-    this.visibleDates = this.availableDates.slice(\r\n-      this.currentIndex,\r\n-      this.currentIndex + this.visibleCount\r\n-    );\r\n-  }\r\n-\r\n-  // Navigate to the previous set of dates\r\n-  prevDate() {\r\n-    if (this.currentIndex > 0) {\r\n-      this.currentIndex--;\r\n-      this.updateVisibleDates();\r\n-    }\r\n-  }\r\n-\r\n-  // Navigate to the next set of dates\r\n-  nextDate() {\r\n-    if (this.currentIndex + this.visibleCount < this.availableDates.length) {\r\n-      this.currentIndex++;\r\n-      this.updateVisibleDates();\r\n-    }\r\n-  }\r\n-\r\n-  // Select a date\r\n-  selectDate(index: number) {\r\n-    this.selectedDateIndex = index;\r\n-    console.log('Selected Date:', this.visibleDates[index]);\r\n-  }\r\n-\r\n-\r\n-  // Morning and Afternoon slots data\r\n-  morningSlots = [\r\n-    { start: '06:00 AM', end: '07:00 AM' },\r\n-    { start: '07:00 AM', end: '08:00 AM' },\r\n-    { start: '08:00 AM', end: '09:00 AM' },\r\n-    { start: '09:00 AM', end: '10:00 AM' },\r\n-    { start: '10:00 AM', end: '11:00 AM' },\r\n-    { start: '11:00 AM', end: '12:00 PM' },\r\n-  ];\r\n-\r\n-  afternoonSlots = [\r\n-    { start: '12:00 PM', end: '01:00 PM' },\r\n-    { start: '01:00 PM', end: '02:00 PM' },\r\n-  ];\r\n-\r\n-  // Variable to store the selected time slot\r\n-  selectedSlot: { start: string; end: string } | null = null;\r\n-\r\n-  // Select a time slot\r\n-  selectSlot(slot: { start: string; end: string }) {\r\n-    this.selectedSlot = slot;\r\n-    console.log('Selected Time Slot:', slot);\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-   // Selected date and time slot\r\n-   selectedDate: { day: string; weekday: string } = { day: '16 Jan', weekday: 'Tuesday' };\r\n-   selectedSlot1: { start: string; end: string } = { start: '11:00 AM', end: '12:00 PM' };\r\n-\r\n-\r\n-   // add patient button disable\r\n-\r\n-   isHomeSlotActive: boolean = false;\r\n-   ispaymentSlotActive: boolean = false;\r\n-\r\n-   onStepChange(event: StepperSelectionEvent): void {\r\n-     const activeStepLabel = event.selectedStep.label;\r\n-     this.isHomeSlotActive = activeStepLabel === 'Home Slot';\r\n-     this.ispaymentSlotActive = activeStepLabel === 'Payment';\r\n-   }\r\n-\r\n-\r\n-   // Razorpay integration////////////////////////////////////////////////////////////////////////\r\n-\r\n-   proceedtopay () {\r\n-    const RozarpayOptions = {\r\n-      description: 'Sample Razorpay demo',\r\n-      currency: 'INR',\r\n-      amount: 24900,\r\n-      name: 'Praveen Kumar',\r\n-      key: 'rzp_test_L4KYt4E6LiVOhg',\r\n-      image: 'emptylogo.png',\r\n-      prefill: {\r\n-        name: 'Praveen Kumar',\r\n-        email: 'praveen@gmail.com',\r\n-        phone: '0987654321'\r\n-      },\r\n-      theme: {\r\n-        color: '#e36464'\r\n-      },\r\n-      modal: {\r\n-        ondismiss:  () => {\r\n-          console.log('dismissed')\r\n-        }\r\n-      }\r\n-    }\r\n-\r\n-    const successCallback = (paymentid: any) => {\r\n-      console.log(paymentid);\r\n-    }\r\n-\r\n-    const failureCallback = (e: any) => {\r\n-      console.log(e);\r\n-    }\r\n-\r\n-    Razorpay.open(RozarpayOptions,successCallback, failureCallback)\r\n-   }\r\n-\r\n-   goBack(): void {\r\n-    window.history.back();\r\n-  }\r\n-  openAddPatientDialog(): void {\r\n-    const dialogRef = this.dialog.open(AddpatientDialogComponent, {\r\n-      width: '800px',\r\n-    });\r\n-\r\n-    dialogRef.afterClosed().subscribe(result => {\r\n-      if (result) {\r\n-        console.log('Patient Data:', result);\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-\r\n-  ///////////////////////////////////////////////////////\r\n-  /////////////////////////////\r\n-  ///\r\n-  ///\r\n-  //\r\n-\r\n-\r\n-  totalMRP = 133.0;\r\n-  discount = 53.0;\r\n-  originalHomeCollectionCharges = 150.0;\r\n-  discountedHomeCollectionCharges = 75.0;\r\n-  circleMembership = 199.0;\r\n-  totalToPay = 354.0;\r\n-  circleSavings = 20.0;\r\n-  cartSavings = 33.0;\r\n-}\r\n"
                }
            ],
            "date": 1739967608493,
            "name": "Commit-0",
            "content": "import { Component, NgModule, ViewChild, AfterViewInit, ChangeDetectorRef, OnInit } from '@angular/core';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { StepperSelectionEvent } from '@angular/cdk/stepper';\r\nimport { MyheaderComponent } from '../profile/myheader/myheader.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../../authentication/auth.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AddpatientDialogComponent } from '../lab-dashboard/addpatient-dialog/addpatient-dialog.component';\r\nimport { LabService } from '../lab-dashboard/lab.service';\r\nimport { MatButtonToggle } from '@angular/material/button-toggle';\r\n\r\ntype AvailableDate = {\r\n  day: string;\r\n  weekday: string;\r\n  isAvailable: boolean;\r\n};\r\n\r\ndeclare var Razorpay: any;\r\n\r\n@Component({\r\n  selector: 'app-cart',\r\n  standalone: true,\r\n  imports: [SharedModule, MyheaderComponent, MatButtonToggle],\r\n  templateUrl: './cart.component.html',\r\n  styleUrl: './cart.component.scss'\r\n})\r\n\r\nexport class CartComponent implements OnInit {\r\n\r\n  @ViewChild(MatStepper) stepper: MatStepper | undefined;\r\n\r\n  locationDetails = localStorage.getItem('userAddress');\r\n\r\n  addressLine1: string = '';\r\n  addressLine2: string = '';\r\n  username: string = '';\r\n  phone: string = '';\r\n  email: string = '';\r\n\r\n  cartItems: any[] = [];\r\n  tests: any[] = [];\r\n  selectedSlottype : string = '';\r\n\r\n\r\n  // Flag to toggle form visibility\r\n  showForm: boolean = false;\r\n  isSignedIn: boolean = false;\r\n\r\n  constructor(private route: ActivatedRoute, private authService: AuthService, private dialog: MatDialog,\r\n    private labservice: LabService,\r\n\r\n  ) {\r\n    this.updateVisibleDates();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // this.cartItems = this.labservice.getCartItems();\r\n\r\n    this.cartItems = this.formatCartData(this.labservice.getCartItems());\r\n    console.log(this.cartItems);\r\n    this.route.queryParams.subscribe(params => {\r\n      const step = params['step']; // e.g., step=2\r\n      if (step && this.stepper) {\r\n        this.stepper.selectedIndex = +step - 1; // Set the step index (0-based index)\r\n      }\r\n    });\r\n\r\n    this.isSignedIn = this.authService.isSignedIn();\r\n\r\n    if (this.isSignedIn) {\r\n      this.username = String(localStorage.getItem('username'));\r\n      this.phone = String(localStorage.getItem('usermobile'));\r\n      this.email = String(localStorage.getItem('useremail'));\r\n    }\r\n\r\n    if (this.locationDetails) {\r\n      const addressParts = this.locationDetails.split(', ');\r\n\r\n      this.addressLine1 = addressParts[0] || '';\r\n\r\n      this.addressLine2 = addressParts.slice(1).join(', ') || '';\r\n    }\r\n\r\n    this.totalAmount;\r\n  }\r\n\r\n  formatCartData(data: any[]): any[] {\r\n    const patients: any[] = [];\r\n\r\n    // Group tests under patients dynamically\r\n    data.forEach(test => {\r\n      // Find if patient already exists\r\n      let patient = patients.find(p => p.id === test.patientID);\r\n\r\n      if (!patient) {\r\n        // If patient doesn't exist, create a new one\r\n        patient = {\r\n          id: test.patientID,  // Assuming `patientID` exists in API data\r\n          patientName: test.patientName, // Assuming `patientName` exists\r\n          tests: []\r\n        };\r\n        patients.push(patient);\r\n      }\r\n\r\n      // Add test details under the respective patient\r\n      patient.tests.push({\r\n        serviceItemID: test.serviceItemID,\r\n        serviceItemName: test.serviceItemName,\r\n        actualprice: test.price - (test.price * test.discount / 100) // Apply discount\r\n      });\r\n    });\r\n\r\n    return patients;\r\n  }\r\n\r\n  // Toggle the form visibility\r\n  toggleForm() {\r\n    this.showForm = !this.showForm;\r\n  }\r\n\r\n  // Dynamic cart data\r\n  // cartItems = [\r\n  //   {\r\n  //     id: 1,\r\n  //     patientName: 'John Doe',\r\n  //     tests: [\r\n  //       { id: 1, testName: 'Glucose Random (RBS) - Sodium Flouride', price: 249 },\r\n  //     ],\r\n  //   },\r\n  // ];\r\n\r\n\r\n\r\n  // Add a new patient\r\n  addAnotherPatient() {\r\n    const newPatientId = this.cartItems.length + 1;\r\n    this.cartItems.push({\r\n      id: newPatientId,\r\n      patientName: `Patient ${newPatientId}`,\r\n     tests: [], // Empty test list initially\r\n      // tests: this.cartItems\r\n    });\r\n  }\r\n\r\n  // Add a new test for a specific patient\r\n  addTest(patientId: number) {\r\n    const patient = this.cartItems.find((p) => p.id === patientId);\r\n    if (patient) {\r\n      const newTestId = patient.tests.length + 1;\r\n      patient.tests.push({\r\n        id: newTestId,\r\n        testName: `New Test ${newTestId}`,\r\n        price: 199, // Example price\r\n      });\r\n    }\r\n  }\r\n\r\n  // Remove a specific test from a specific patient\r\n  removeTest(patientId: number, testId: number) {\r\n    const patientIndex = this.cartItems.findIndex(p => p.id === patientId);\r\n\r\n    if (patientIndex !== -1) {\r\n      // Filter out the test to remove\r\n      this.cartItems[patientIndex].tests = this.cartItems[patientIndex].tests.filter((test: { serviceItemID: number; }) => test.serviceItemID !== testId);\r\n\r\n      // If the patient has no more tests, remove them from the cart\r\n      if (this.cartItems[patientIndex].tests.length === 0) {\r\n        this.cartItems.splice(patientIndex, 1);\r\n      }\r\n\r\n      // Force Angular to detect changes\r\n      this.cartItems = [...this.cartItems];\r\n    }\r\n  }\r\n\r\n\r\n  // Summary amount (calculated dynamically)\r\n  get totalAmount(): number {\r\n    if (!this.cartItems || this.cartItems.length === 0) return 0;\r\n\r\n    return this.cartItems.reduce((total, patient) => {\r\n      if (!patient.tests || patient.tests.length === 0) return total;\r\n\r\n      const patientTotal = patient.tests.reduce((testTotal: number, test: { actualprice: number; }) => {\r\n        console.log(`Adding Test: Price: ${test.actualprice}`);\r\n        return testTotal + (test.actualprice || 0);\r\n      }, 0);\r\n      return total + patientTotal;\r\n    }, 0);\r\n  }\r\n\r\n\r\n\r\n\r\n  // Method to handle the \"Next\" button click\r\n  saveandnext(stepper: MatStepper) {\r\n    // Add any save logic here if needed\r\n    console.log('Navigating to the next step...');\r\n    stepper.next();\r\n  }\r\n\r\n   // Available dates for selection\r\n   availableDates: AvailableDate[] = [\r\n    { day: '31 Dec', weekday: 'Tuesday', isAvailable: true },\r\n    { day: '01 Jan', weekday: 'Wednesday', isAvailable: true },\r\n    { day: '02 Jan', weekday: 'Thursday', isAvailable: true },\r\n    { day: '03 Jan', weekday: 'Friday', isAvailable: true },\r\n    { day: '04 Jan', weekday: 'Saturday', isAvailable: true },\r\n    { day: '05 Jan', weekday: 'Sunday', isAvailable: true },\r\n  ];\r\n\r\n  // Visible dates should have the same type as availableDates\r\n  visibleDates: AvailableDate[] = [];\r\n  visibleCount = 5; // Number of dates visible at a time\r\n  currentIndex = 0;\r\n  selectedDateIndex: number | null = null;\r\n\r\n  // Update the visible dates\r\n  updateVisibleDates() {\r\n    this.visibleDates = this.availableDates.slice(\r\n      this.currentIndex,\r\n      this.currentIndex + this.visibleCount\r\n    );\r\n  }\r\n\r\n  // Navigate to the previous set of dates\r\n  prevDate() {\r\n    if (this.currentIndex > 0) {\r\n      this.currentIndex--;\r\n      this.updateVisibleDates();\r\n    }\r\n  }\r\n\r\n  // Navigate to the next set of dates\r\n  nextDate() {\r\n    if (this.currentIndex + this.visibleCount < this.availableDates.length) {\r\n      this.currentIndex++;\r\n      this.updateVisibleDates();\r\n    }\r\n  }\r\n\r\n  // Select a date\r\n  selectDate(index: number) {\r\n    this.selectedDateIndex = index;\r\n    console.log('Selected Date:', this.visibleDates[index]);\r\n  }\r\n\r\n\r\n  // Morning and Afternoon slots data\r\n  morningSlots = [\r\n    { start: '06:00 AM', end: '07:00 AM' },\r\n    { start: '07:00 AM', end: '08:00 AM' },\r\n    { start: '08:00 AM', end: '09:00 AM' },\r\n    { start: '09:00 AM', end: '10:00 AM' },\r\n    { start: '10:00 AM', end: '11:00 AM' },\r\n    { start: '11:00 AM', end: '12:00 PM' },\r\n  ];\r\n\r\n  afternoonSlots = [\r\n    { start: '12:00 PM', end: '01:00 PM' },\r\n    { start: '01:00 PM', end: '02:00 PM' },\r\n  ];\r\n\r\n  // Variable to store the selected time slot\r\n  selectedSlot: { start: string; end: string } | null = null;\r\n\r\n  // Select a time slot\r\n  selectSlot(slot: { start: string; end: string }) {\r\n    this.selectedSlot = slot;\r\n    console.log('Selected Time Slot:', slot);\r\n  }\r\n\r\n\r\n\r\n\r\n   // Selected date and time slot\r\n   selectedDate: { day: string; weekday: string } = { day: '16 Jan', weekday: 'Tuesday' };\r\n   selectedSlot1: { start: string; end: string } = { start: '11:00 AM', end: '12:00 PM' };\r\n\r\n\r\n   // add patient button disable\r\n\r\n   isHomeSlotActive: boolean = false;\r\n   ispaymentSlotActive: boolean = false;\r\n\r\n   onStepChange(event: StepperSelectionEvent): void {\r\n     const activeStepLabel = event.selectedStep.label;\r\n     this.isHomeSlotActive = activeStepLabel === 'Home Slot';\r\n     this.ispaymentSlotActive = activeStepLabel === 'Payment';\r\n   }\r\n\r\n\r\n   // Razorpay integration////////////////////////////////////////////////////////////////////////\r\n\r\n   proceedtopay () {\r\n    const RozarpayOptions = {\r\n      description: 'Sample Razorpay demo',\r\n      currency: 'INR',\r\n      amount: 24900,\r\n      name: 'Praveen Kumar',\r\n      key: 'rzp_test_L4KYt4E6LiVOhg',\r\n      image: 'emptylogo.png',\r\n      prefill: {\r\n        name: 'Praveen Kumar',\r\n        email: 'praveen@gmail.com',\r\n        phone: '0987654321'\r\n      },\r\n      theme: {\r\n        color: '#e36464'\r\n      },\r\n      modal: {\r\n        ondismiss:  () => {\r\n          console.log('dismissed')\r\n        }\r\n      }\r\n    }\r\n\r\n    const successCallback = (paymentid: any) => {\r\n      console.log(paymentid);\r\n    }\r\n\r\n    const failureCallback = (e: any) => {\r\n      console.log(e);\r\n    }\r\n\r\n    Razorpay.open(RozarpayOptions,successCallback, failureCallback)\r\n   }\r\n\r\n   goBack(): void {\r\n    window.history.back();\r\n  }\r\n  openAddPatientDialog(): void {\r\n    const dialogRef = this.dialog.open(AddpatientDialogComponent, {\r\n      width: '800px',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        console.log('Patient Data:', result);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  ///////////////////////////////////////////////////////\r\n  /////////////////////////////\r\n  ///\r\n  ///\r\n  //\r\n\r\n\r\n  totalMRP = 133.0;\r\n  discount = 53.0;\r\n  originalHomeCollectionCharges = 150.0;\r\n  discountedHomeCollectionCharges = 75.0;\r\n  circleMembership = 199.0;\r\n  totalToPay = 354.0;\r\n  circleSavings = 20.0;\r\n  cartSavings = 33.0;\r\n}\r\n"
        }
    ]
}