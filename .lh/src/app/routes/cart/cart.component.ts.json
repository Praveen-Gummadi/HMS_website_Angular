{
    "sourceFile": "src/app/routes/cart/cart.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1737112368250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1737112368250,
            "name": "Commit-0",
            "content": "import { Component, NgModule } from '@angular/core';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { StepperSelectionEvent } from '@angular/cdk/stepper';\r\nimport { RouterLink } from '@angular/router';\r\n\r\ntype AvailableDate = {\r\n  day: string;\r\n  weekday: string;\r\n  isAvailable: boolean;\r\n};\r\n\r\ndeclare var Razorpay: any;\r\n\r\n@Component({\r\n  selector: 'app-cart',\r\n  standalone: true,\r\n  imports: [SharedModule, RouterLink],\r\n  templateUrl: './cart.component.html',\r\n  styleUrl: './cart.component.scss'\r\n})\r\n\r\nexport class CartComponent {\r\n\r\n  locationDetails: string = 'GVR Infosystems Pvt. Ltd., Opp: Tata Motors, Sri Sai Enclave, Old Bowenpally, Hyderabad, Telangana, India.';\r\n\r\n  addressLine1: string = 'GVR Infosystems Pvt. Ltd., 3rd floor, Opp: Tata Motors Service Centre';\r\n  addressLine2: string = 'Sri Sai Enclave, Old Bowenpally, Hyderabad, Telangana, India.';\r\n  phone: string = '0987654321';\r\n  email: string = 'gvrinfo@gmail.com';\r\n\r\n\r\n  // Flag to toggle form visibility\r\n  showForm: boolean = false;\r\n\r\n  // Toggle the form visibility\r\n  toggleForm() {\r\n    this.showForm = !this.showForm;\r\n  }\r\n\r\n  // Dynamic cart data\r\n  cartItems = [\r\n    {\r\n      id: 1,\r\n      patientName: 'John Doe',\r\n      tests: [\r\n        { id: 1, testName: 'Glucose Random (RBS) - Sodium Flouride', price: 249 },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Add a new patient\r\n  addAnotherPatient() {\r\n    const newPatientId = this.cartItems.length + 1;\r\n    this.cartItems.push({\r\n      id: newPatientId,\r\n      patientName: `Patient ${newPatientId}`,\r\n      tests: [], // Empty test list initially\r\n    });\r\n  }\r\n\r\n  // Add a new test for a specific patient\r\n  addTest(patientId: number) {\r\n    const patient = this.cartItems.find((p) => p.id === patientId);\r\n    if (patient) {\r\n      const newTestId = patient.tests.length + 1;\r\n      patient.tests.push({\r\n        id: newTestId,\r\n        testName: `New Test ${newTestId}`,\r\n        price: 199, // Example price\r\n      });\r\n    }\r\n  }\r\n\r\n  // Remove a specific test from a specific patient\r\n  removeTest(patientId: number, testId: number) {\r\n    const patient = this.cartItems.find((p) => p.id === patientId);\r\n    if (patient) {\r\n      patient.tests = patient.tests.filter((t) => t.id !== testId);\r\n    }\r\n  }\r\n\r\n  // Summary amount (calculated dynamically)\r\n  get totalAmount(): number {\r\n    // Reduce through all cartItems (patients) and sum up the test prices\r\n    return this.cartItems.reduce((total, patient) => {\r\n      const patientTotal = patient.tests.reduce((testTotal, test) => testTotal + test.price, 0);\r\n      return total + patientTotal;\r\n    }, 0);\r\n  }\r\n\r\n  // Remove item from cart\r\n  removeItem(id: number) {\r\n    this.cartItems = this.cartItems.filter((item) => item.id !== id);\r\n  }\r\n\r\n  // Method to handle the \"Next\" button click\r\n  saveandnext(stepper: MatStepper) {\r\n    // Add any save logic here if needed\r\n    console.log('Navigating to the next step...');\r\n    stepper.next(); // Move to the next step\r\n  }\r\n\r\n   // Available dates for selection\r\n   availableDates: AvailableDate[] = [\r\n    { day: '31 Dec', weekday: 'Tuesday', isAvailable: true },\r\n    { day: '01 Jan', weekday: 'Wednesday', isAvailable: true },\r\n    { day: '02 Jan', weekday: 'Thursday', isAvailable: true },\r\n    { day: '03 Jan', weekday: 'Friday', isAvailable: true },\r\n    { day: '04 Jan', weekday: 'Saturday', isAvailable: true },\r\n    { day: '05 Jan', weekday: 'Sunday', isAvailable: true },\r\n  ];\r\n\r\n  // Visible dates should have the same type as availableDates\r\n  visibleDates: AvailableDate[] = [];\r\n  visibleCount = 5; // Number of dates visible at a time\r\n  currentIndex = 0;\r\n  selectedDateIndex: number | null = null;\r\n\r\n  constructor() {\r\n    this.updateVisibleDates();\r\n  }\r\n\r\n  // Update the visible dates\r\n  updateVisibleDates() {\r\n    this.visibleDates = this.availableDates.slice(\r\n      this.currentIndex,\r\n      this.currentIndex + this.visibleCount\r\n    );\r\n  }\r\n\r\n  // Navigate to the previous set of dates\r\n  prevDate() {\r\n    if (this.currentIndex > 0) {\r\n      this.currentIndex--;\r\n      this.updateVisibleDates();\r\n    }\r\n  }\r\n\r\n  // Navigate to the next set of dates\r\n  nextDate() {\r\n    if (this.currentIndex + this.visibleCount < this.availableDates.length) {\r\n      this.currentIndex++;\r\n      this.updateVisibleDates();\r\n    }\r\n  }\r\n\r\n  // Select a date\r\n  selectDate(index: number) {\r\n    this.selectedDateIndex = index;\r\n    console.log('Selected Date:', this.visibleDates[index]);\r\n  }\r\n\r\n\r\n  // Morning and Afternoon slots data\r\n  morningSlots = [\r\n    { start: '06:00 AM', end: '07:00 AM' },\r\n    { start: '07:00 AM', end: '08:00 AM' },\r\n    { start: '08:00 AM', end: '09:00 AM' },\r\n    { start: '09:00 AM', end: '10:00 AM' },\r\n    { start: '10:00 AM', end: '11:00 AM' },\r\n    { start: '11:00 AM', end: '12:00 PM' },\r\n  ];\r\n\r\n  afternoonSlots = [\r\n    { start: '12:00 PM', end: '01:00 PM' },\r\n    { start: '01:00 PM', end: '02:00 PM' },\r\n  ];\r\n\r\n  // Variable to store the selected time slot\r\n  selectedSlot: { start: string; end: string } | null = null;\r\n\r\n  // Select a time slot\r\n  selectSlot(slot: { start: string; end: string }) {\r\n    this.selectedSlot = slot;\r\n    console.log('Selected Time Slot:', slot);\r\n  }\r\n\r\n\r\n\r\n\r\n   // Selected date and time slot\r\n   selectedDate: { day: string; weekday: string } = { day: '16 Jan', weekday: 'Tuesday' };\r\n   selectedSlot1: { start: string; end: string } = { start: '11:00 AM', end: '12:00 PM' };\r\n\r\n\r\n   // add patient button disable\r\n\r\n   isHomeSlotActive: boolean = false;\r\n   ispaymentSlotActive: boolean = false;\r\n\r\n   onStepChange(event: StepperSelectionEvent): void {\r\n     const activeStepLabel = event.selectedStep.label;\r\n     this.isHomeSlotActive = activeStepLabel === 'Home Slot';\r\n     this.ispaymentSlotActive = activeStepLabel === 'Payment';\r\n   }\r\n\r\n\r\n   // Razorpay integration////////////////////////////////////////////////////////////////////////\r\n\r\n   proceedtopay () {\r\n    const RozarpayOptions = {\r\n      description: 'Sample Razorpay demo',\r\n      currency: 'INR',\r\n      amount: 24900,\r\n      name: 'Praveen Kumar',\r\n      key: 'rzp_test_L4KYt4E6LiVOhg',\r\n      image: 'emptylogo.png',\r\n      prefill: {\r\n        name: 'Praveen Kumar',\r\n        email: 'praveen@gmail.com',\r\n        phone: '0987654321'\r\n      },\r\n      theme: {\r\n        color: '#e36464'\r\n      },\r\n      modal: {\r\n        ondismiss:  () => {\r\n          console.log('dismissed')\r\n        }\r\n      }\r\n    }\r\n\r\n    const successCallback = (paymentid: any) => {\r\n      console.log(paymentid);\r\n    }\r\n\r\n    const failureCallback = (e: any) => {\r\n      console.log(e);\r\n    }\r\n\r\n    Razorpay.open(RozarpayOptions,successCallback, failureCallback)\r\n   }\r\n}\r\n\r\n"
        }
    ]
}